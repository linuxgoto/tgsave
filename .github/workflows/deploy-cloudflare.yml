name: 🚀 Deploy to Cloudflare Workers

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '18'
  WRANGLER_VERSION: '^3.0.0'

jobs:
  # 代码质量检查
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Run ESLint
        run: npm run lint

      - name: 🎨 Check code formatting
        run: npm run format -- --check

      - name: 🧪 Run tests
        run: npm test

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # 安全检查
  security-check:
    name: 🛡️ Security Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run security audit
        run: npm audit --audit-level=moderate

      - name: 🔐 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔐 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # 开发环境部署
  deploy-development:
    name: 🚧 Deploy to Development
    runs-on: ubuntu-latest
    needs: [quality-check, security-check]
    if: github.event_name == 'pull_request'
    environment:
      name: development
      url: https://tgstate-dev.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⚙️ Create wrangler.toml
        run: |
          cat > wrangler.toml << EOF
          name = "tgstate-dev"
          main = "src/worker.js"
          compatibility_date = "2024-01-01"
          compatibility_flags = ["nodejs_compat"]

          [vars]
          TOKEN = "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          TARGET = "${{ secrets.TELEGRAM_TARGET }}"
          PASS = "${{ secrets.ACCESS_PASSWORD }}"
          MODE = "${{ vars.RUN_MODE || 'p' }}"
          URL = "${{ vars.CUSTOM_DOMAIN }}"
          EOF

      - name: 🚀 Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

      - name: 📝 Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Development deployment completed!**
              
              📱 Preview URL: https://tgstate-dev.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev
              
              🔍 Health Check: https://tgstate-dev.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev/health
              
              ⏰ Deployed at: ${new Date().toISOString()}`
            })

  # 生产环境部署
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, security-check]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: ${{ vars.CUSTOM_DOMAIN || format('https://tgstate-prod.{0}.workers.dev', secrets.CLOUDFLARE_ACCOUNT_ID) }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build --if-present

      - name: ⚙️ Create production wrangler.toml
        run: |
          cat > wrangler.toml << EOF
          name = "tgstate-prod"
          main = "src/worker.js"
          compatibility_date = "2024-01-01"
          compatibility_flags = ["nodejs_compat"]

          [vars]
          TOKEN = "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          TARGET = "${{ secrets.TELEGRAM_TARGET }}"
          PASS = "${{ secrets.ACCESS_PASSWORD }}"
          MODE = "${{ vars.RUN_MODE || 'p' }}"
          URL = "${{ vars.CUSTOM_DOMAIN }}"

          # KV 存储绑定（可选）
          [[kv_namespaces]]
          binding = "CACHE"
          id = "${{ secrets.KV_NAMESPACE_ID }}"
          preview_id = "${{ secrets.KV_NAMESPACE_PREVIEW_ID }}"
          EOF

      - name: 🗄️ Create KV namespace (if needed)
        if: secrets.KV_NAMESPACE_ID == ''
        run: |
          echo "Creating KV namespace..."
          npx wrangler kv:namespace create "CACHE" --preview || echo "Preview namespace may already exist"
          npx wrangler kv:namespace create "CACHE" || echo "Namespace may already exist"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: 🚀 Deploy to Production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

      - name: 🏥 Health Check
        run: |
          echo "Performing health check..."
          sleep 10
          HEALTH_URL="${{ vars.CUSTOM_DOMAIN || format('https://tgstate-prod.{0}.workers.dev', secrets.CLOUDFLARE_ACCOUNT_ID) }}/health"
          
          for i in {1..5}; do
            if curl -f "$HEALTH_URL"; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Health check failed, retrying in 10 seconds... ($i/5)"
              sleep 10
            fi
          done

      - name: 🏷️ Create Release Tag
        if: github.event_name == 'push'
        run: |
          TAG="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          git tag $TAG
          git push origin $TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📢 Notify deployment success
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            const deploymentUrl = '${{ vars.CUSTOM_DOMAIN }}' || 'https://tgstate-prod.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev';
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: deploymentUrl,
              description: 'Production deployment successful',
              context: 'deployment/production'
            });

  # 部署失败通知
  notify-failure:
    name: 📢 Notify Failure
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-production]
    if: failure()
    steps:
      - name: 📧 Send failure notification
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'failure',
              description: 'Deployment failed',
              context: 'deployment'
            });

            // 如果配置了 Slack webhook，可以发送通知
            if ('${{ secrets.SLACK_WEBHOOK_URL }}') {
              await fetch('${{ secrets.SLACK_WEBHOOK_URL }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  text: `🚨 Deployment failed for ${context.repo.owner}/${context.repo.repo}`,
                  attachments: [{
                    color: 'danger',
                    fields: [{
                      title: 'Branch',
                      value: context.ref,
                      short: true
                    }, {
                      title: 'Commit',
                      value: context.sha.substring(0, 7),
                      short: true
                    }]
                  }]
                })
              });
            }