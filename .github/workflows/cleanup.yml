name: 🧹 Cleanup & Maintenance

on:
  schedule:
    # 每周日 UTC 3:00 运行清理任务
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dev_deployments
          - old_releases
          - cache_purge

env:
  NODE_VERSION: '18'

jobs:
  # 清理开发环境部署
  cleanup-dev-deployments:
    name: 🗑️ Cleanup Dev Deployments
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'dev_deployments' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🗑️ List and cleanup old dev workers
        run: |
          echo "Listing all workers..."
          npx wrangler list
          
          # 这里可以添加清理逻辑
          # 例如删除超过7天的开发环境部署
          echo "Cleanup logic would go here"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 清理旧版本
  cleanup-old-releases:
    name: 🏷️ Cleanup Old Releases
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'old_releases' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🗑️ Delete old releases
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // 保留最新的10个 release，删除其余的
            const releasesToDelete = releases.slice(10);
            
            for (const release of releasesToDelete) {
              if (!release.prerelease) {
                console.log(`Deleting release: ${release.tag_name}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                // 同时删除对应的 tag
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${release.tag_name}`
                  });
                } catch (error) {
                  console.log(`Tag ${release.tag_name} may not exist or already deleted`);
                }
              }
            }

  # 清理缓存
  purge-cache:
    name: 🧹 Purge Cache
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'cache_purge' || github.event.inputs.cleanup_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Purge Cloudflare cache
        run: |
          # 清理 KV 存储中的过期数据
          if [ -n "${{ secrets.KV_NAMESPACE_ID }}" ]; then
            echo "Purging KV cache..."
            # 这里可以添加 KV 清理逻辑
            npx wrangler kv:key list --namespace-id="${{ secrets.KV_NAMESPACE_ID }}" || echo "No KV data to clean"
          fi
          
          # 清理 Cloudflare 边缘缓存
          echo "Purging edge cache..."
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}' || echo "Zone purge not configured"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 健康检查和监控
  health-monitoring:
    name: 🏥 Health Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: 🏥 Check production health
        run: |
          HEALTH_URL="${{ vars.CUSTOM_DOMAIN || format('https://tgstate-prod.{0}.workers.dev', secrets.CLOUDFLARE_ACCOUNT_ID) }}/health"
          
          echo "Checking health at: $HEALTH_URL"
          
          RESPONSE=$(curl -s -w "%{http_code}" "$HEALTH_URL")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n -1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Health check passed"
            echo "Response: $BODY"
          else
            echo "❌ Health check failed with HTTP $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi

      - name: 📊 Performance check
        run: |
          MAIN_URL="${{ vars.CUSTOM_DOMAIN || format('https://tgstate-prod.{0}.workers.dev', secrets.CLOUDFLARE_ACCOUNT_ID) }}"
          
          echo "Performance testing: $MAIN_URL"
          
          # 测试响应时间
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$MAIN_URL")
          echo "Response time: ${RESPONSE_TIME}s"
          
          # 如果响应时间超过3秒，发出警告
          if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )); then
            echo "⚠️ Warning: Response time is slow (${RESPONSE_TIME}s)"
          fi

  # 依赖更新检查
  dependency-updates:
    name: 📦 Check Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Check for outdated packages
        run: |
          echo "Checking for outdated packages..."
          npm outdated || true
          
          echo "Checking for security vulnerabilities..."
          npm audit --audit-level=moderate || true

      - name: 🔄 Create dependency update issue
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            try {
              const outdated = execSync('npm outdated --json', { encoding: 'utf8' });
              const packages = JSON.parse(outdated);
              
              if (Object.keys(packages).length > 0) {
                const packageList = Object.entries(packages)
                  .map(([name, info]) => `- \`${name}\`: ${info.current} → ${info.latest}`)
                  .join('\n');
                
                const issueBody = `## 📦 Dependency Updates Available
                
                The following packages have updates available:
                
                ${packageList}
                
                ## 🔧 Action Required
                
                Please review and update these dependencies:
                
                \`\`\`bash
                npm update
                npm audit fix
                \`\`\`
                
                ## 🤖 Automated Check
                
                This issue was created automatically by the cleanup workflow.
                `;
                
                // 检查是否已存在类似的 issue
                const { data: issues } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: 'dependencies'
                });
                
                const existingIssue = issues.find(issue => 
                  issue.title.includes('Dependency Updates Available')
                );
                
                if (!existingIssue) {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: '📦 Dependency Updates Available',
                    body: issueBody,
                    labels: ['dependencies', 'maintenance']
                  });
                }
              }
            } catch (error) {
              console.log('No outdated packages found or error occurred:', error.message);
            }

  # 报告清理结果
  report-results:
    name: 📊 Report Results
    runs-on: ubuntu-latest
    needs: [cleanup-dev-deployments, cleanup-old-releases, purge-cache, health-monitoring, dependency-updates]
    if: always()
    steps:
      - name: 📊 Generate cleanup report
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'cleanup-dev-deployments': '${{ needs.cleanup-dev-deployments.result }}',
              'cleanup-old-releases': '${{ needs.cleanup-old-releases.result }}',
              'purge-cache': '${{ needs.purge-cache.result }}',
              'health-monitoring': '${{ needs.health-monitoring.result }}',
              'dependency-updates': '${{ needs.dependency-updates.result }}'
            };
            
            const report = Object.entries(results)
              .map(([job, result]) => {
                const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
                return `${emoji} ${job}: ${result}`;
              })
              .join('\n');
            
            console.log('Cleanup Report:');
            console.log(report);
            
            // 如果配置了 Slack，发送报告
            if ('${{ secrets.SLACK_WEBHOOK_URL }}') {
              await fetch('${{ secrets.SLACK_WEBHOOK_URL }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  text: `🧹 Weekly Cleanup Report`,
                  attachments: [{
                    color: 'good',
                    fields: [{
                      title: 'Cleanup Results',
                      value: report,
                      short: false
                    }]
                  }]
                })
              });
            }